// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using datalayer.Context;

namespace datalayer.Migrations
{
    [DbContext(typeof(Corecontext))]
    partial class CorecontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("datalayer.Entities.Course.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDescription")
                        .IsRequired();

                    b.Property<string>("CourseImagname")
                        .HasMaxLength(50);

                    b.Property<int>("CoursePrice");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("Createdate");

                    b.Property<string>("DemofileName")
                        .HasMaxLength(100);

                    b.Property<int>("GroupID");

                    b.Property<int>("LevelID");

                    b.Property<int>("MyProperty");

                    b.Property<int>("StatusID");

                    b.Property<int?>("SubGroup");

                    b.Property<string>("Tags")
                        .HasMaxLength(600);

                    b.Property<int>("TeacherID");

                    b.Property<DateTime?>("Updatedate");

                    b.HasKey("CourseID");

                    b.HasIndex("GroupID");

                    b.HasIndex("LevelID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SubGroup");

                    b.HasIndex("TeacherID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(700);

                    b.Property<int>("CourseID");

                    b.Property<DateTime>("CreaDate");

                    b.Property<int>("UserID");

                    b.Property<bool>("isAdminread");

                    b.Property<bool>("isDelete");

                    b.HasKey("CommentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseComments");
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseEpisode", b =>
                {
                    b.Property<int>("EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<string>("EpisodeFileName");

                    b.Property<TimeSpan>("EpisodeTime");

                    b.Property<string>("EpisodeTitle")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("isFree");

                    b.HasKey("EpisodeID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseEpisodes");
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseGroup", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("ParentID");

                    b.Property<bool>("isDelete");

                    b.HasKey("GroupID");

                    b.HasIndex("ParentID");

                    b.ToTable("CourseGroup");
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseLevel", b =>
                {
                    b.Property<int>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("LevelID");

                    b.ToTable("CourseLevels");
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseStatus", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("StatusID");

                    b.ToTable("CourseStatuses");
                });

            modelBuilder.Entity("datalayer.Entities.Course.UserCourse", b =>
                {
                    b.Property<int>("UC_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID");

                    b.Property<int>("UserID");

                    b.HasKey("UC_ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("datalayer.Entities.Order.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("DiscountPercent");

                    b.Property<DateTime?>("EndeDate");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("UsableCount");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("datalayer.Entities.Order.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Createdate");

                    b.Property<int>("Ordersum");

                    b.Property<int>("UserID");

                    b.Property<bool>("isFinally");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("datalayer.Entities.Order.OrderDetail", b =>
                {
                    b.Property<int>("DetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("CourseID");

                    b.Property<int>("OrderID");

                    b.Property<int>("Price");

                    b.HasKey("DetailID");

                    b.HasIndex("CourseID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("datalayer.Entities.Permission.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentID");

                    b.Property<string>("PermissionTitle")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("PermissionID");

                    b.HasIndex("ParentID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("datalayer.Entities.Permission.RolePermission", b =>
                {
                    b.Property<int>("RP_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionID");

                    b.Property<int>("RoleID");

                    b.HasKey("RP_ID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("datalayer.Entities.User.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleTilte")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("isDelete");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("datalayer.Entities.User.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activecode")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("Registerdate");

                    b.Property<string>("UserAvatar")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDelete");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("datalayer.Entities.User.User_Role", b =>
                {
                    b.Property<int>("Us_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("Us_ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("User_Roles");
                });

            modelBuilder.Entity("datalayer.Entities.User.UserDiscountCode", b =>
                {
                    b.Property<int>("UD_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountID");

                    b.Property<int>("UserID");

                    b.HasKey("UD_ID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("UserID");

                    b.ToTable("UserDiscountCodes");
                });

            modelBuilder.Entity("datalayer.Entities.Wallet.Wallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Createdate");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("TypeID");

                    b.Property<int>("UserID");

                    b.Property<bool>("isPay");

                    b.HasKey("WalletID");

                    b.HasIndex("TypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("datalayer.Entities.Wallet.WalletType", b =>
                {
                    b.Property<int>("TypeID");

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("TypeID");

                    b.ToTable("WalletTypes");
                });

            modelBuilder.Entity("datalayer.Entities.Course.Course", b =>
                {
                    b.HasOne("datalayer.Entities.Course.CourseGroup", "CourseGroup")
                        .WithMany("Courses")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.Course.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.Course.CourseStatus", "CourseStatus")
                        .WithMany("Courses")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.Course.CourseGroup", "Group")
                        .WithMany("SubGroup")
                        .HasForeignKey("SubGroup");

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseComment", b =>
                {
                    b.HasOne("datalayer.Entities.Course.Course", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("CourseComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseEpisode", b =>
                {
                    b.HasOne("datalayer.Entities.Course.Course", "Course")
                        .WithMany("CourseEpisodes")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Course.CourseGroup", b =>
                {
                    b.HasOne("datalayer.Entities.Course.CourseGroup")
                        .WithMany("CourseGroups")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("datalayer.Entities.Course.UserCourse", b =>
                {
                    b.HasOne("datalayer.Entities.Course.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Order.Order", b =>
                {
                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Order.OrderDetail", b =>
                {
                    b.HasOne("datalayer.Entities.Course.Course", "Course")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.Order.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Permission.Permission", b =>
                {
                    b.HasOne("datalayer.Entities.Permission.Permission")
                        .WithMany("Permissions")
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("datalayer.Entities.Permission.RolePermission", b =>
                {
                    b.HasOne("datalayer.Entities.Permission.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.User.User_Role", b =>
                {
                    b.HasOne("datalayer.Entities.User.Role", "Role")
                        .WithMany("user_Roles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("user_Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.User.UserDiscountCode", b =>
                {
                    b.HasOne("datalayer.Entities.Order.Discount", "Discount")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("DiscountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("UserDiscountCodes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("datalayer.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("datalayer.Entities.Wallet.WalletType", "WalletType")
                        .WithMany("wallets")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("datalayer.Entities.User.User", "User")
                        .WithMany("wallets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
